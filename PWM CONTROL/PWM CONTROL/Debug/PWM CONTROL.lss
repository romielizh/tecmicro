
PWM CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000173  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000181  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000086c  00000000  00000000  000001a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060e  00000000  00000000  00000a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f8  00000000  00000000  00001023  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000121c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001470  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.setupPWM 00000014  000000ae  000000ae  00000122  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000018  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  000000ce  000000ce  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  00000098  00000098  0000010c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  000000c6  000000c6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 4c 00 	jmp	0x98	; 0x98 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.setupPWM:

000000ae <setupPWM>:


void setupPWM() 
{
	// Configurar Timer0 para PWM no invertido en OC0A (PD6) y OC0B (PD5)
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM00) | (1 << WGM01);
  ae:	84 b5       	in	r24, 0x24	; 36
  b0:	83 6a       	ori	r24, 0xA3	; 163
  b2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);  // Establecer el preescalador a 8 para una frecuencia base
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	85 bd       	out	0x25, r24	; 37

	// Configurar los pines OC0A (PD6) y OC0B (PD5) como salidas
	DDRD |= (1 << DDD6) | (1 << DDD5);
  ba:	8a b1       	in	r24, 0x0a	; 10
  bc:	80 66       	ori	r24, 0x60	; 96
  be:	8a b9       	out	0x0a, r24	; 10
  c0:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:

int main(void)
{

	// Configurar como salida pines 1, 2 (pd 9 y 10 motor 1) y 3, 4 (pd 11 y 12 motor 2)
	DDRB |= (1 << DDB1)|(1 << DDB2)|(1 << DDB3)|(1 << DDB4);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8e 61       	ori	r24, 0x1E	; 30
  84:	84 b9       	out	0x04, r24	; 4
	
	// Control de avance retroceso motores
	PORTB |= (1 << DDB1)|(0 << DDB2)|(1 << DDB3)|(0 << DDB4);
  86:	85 b1       	in	r24, 0x05	; 5
  88:	8a 60       	ori	r24, 0x0A	; 10
  8a:	85 b9       	out	0x05, r24	; 5
	
	setupPWM();
  8c:	0e 94 57 00 	call	0xae	; 0xae <setupPWM>

	// Ajustar los ciclos de trabajo para OC0A (PD6) y OC0B (PD5)
	OCR0A = 0xFF;  // Configuración de un ciclo de trabajo del 100% en OC0A
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0xFF;   // Configuración de un ciclo de trabajo del 100% en OC0B
  94:	88 bd       	out	0x28, r24	; 40
  96:	ff cf       	rjmp	.-2      	; 0x96 <main+0x16>

Disassembly of section .text.__dummy_fini:

000000ca <_fini>:
  ca:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000cc <__funcs_on_exit>:
  cc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000ce <__simulator_exit>:
  ce:	08 95       	ret

Disassembly of section .text.exit:

00000098 <exit>:
  98:	ec 01       	movw	r28, r24
  9a:	0e 94 66 00 	call	0xcc	; 0xcc <__funcs_on_exit>
  9e:	0e 94 65 00 	call	0xca	; 0xca <_fini>
  a2:	ce 01       	movw	r24, r28
  a4:	0e 94 67 00 	call	0xce	; 0xce <__simulator_exit>
  a8:	ce 01       	movw	r24, r28
  aa:	0e 94 63 00 	call	0xc6	; 0xc6 <_Exit>

Disassembly of section .text._Exit:

000000c6 <_Exit>:
  c6:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
