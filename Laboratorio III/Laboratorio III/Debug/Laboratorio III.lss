
Laboratorio III.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000004c2  00000576  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000005a5  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000005b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c92  00000000  00000000  000005fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000746  00000000  00000000  0000128d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a3  00000000  00000000  000019d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001e78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000211  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a6  00000000  00000000  00002145  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000024eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000434  00000434  000004e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002554  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.ConfigInterrupciones 0000001a  00000404  00000404  000004b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       00000080  00800100  00000442  000004f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 16 .text.setStepX 000000ee  000000c8  000000c8  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.setStepY 000000ee  000001b6  000001b6  0000026a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    000000b4  000002a4  000002a4  00000358  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__vector_1 00000056  00000358  00000358  0000040c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__vector_2 00000056  000003ae  000003ae  00000462  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .bss.Auxb2    00000002  00800180  00800180  00000576  2**0
                  ALLOC
 22 .bss.Auxb1    00000002  00800182  00800182  00000576  2**0
                  ALLOC
 23 .text.__dummy_fini 00000002  0000043c  0000043c  000004f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_funcs_on_exit 00000002  0000043e  0000043e  000004f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_simulator_exit 00000002  00000440  00000440  000004f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.exit    00000016  0000041e  0000041e  000004d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text._Exit   00000004  00000438  00000438  000004ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_1>
   8:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_2>
   c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  10:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  14:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  18:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  1c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  20:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  24:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  28:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  2c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  30:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  34:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  38:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  3c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  40:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  44:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  48:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  4c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  50:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  54:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  58:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  5c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  60:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
  64:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 80       	ldd	r0, Z+1	; 0x01
  6c:	00 04       	cpc	r0, r0
  6e:	42 01       	movw	r8, r4
  70:	80 01       	movw	r16, r0
  72:	84 80       	ldd	r8, Z+4	; 0x04

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  c0:	0c 94 0f 02 	jmp	0x41e	; 0x41e <exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

00000434 <__bad_interrupt>:
 434:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.ConfigInterrupciones:

00000404 <ConfigInterrupciones>:
#define YIN4 PIND7											//>motor2<

//????????????????????????????????????????????????????????????????????????????????????????//-----------------------------------------------------------------------------//
void ConfigInterrupciones()
{															//>interupciones<
	EICRA |= (1 << ISC01);																	// Configurar boton1 para flanco de bajada
 404:	e9 e6       	ldi	r30, 0x69	; 105
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	82 60       	ori	r24, 0x02	; 2
 40c:	80 83       	st	Z, r24
	EICRA |= (1 << ISC11);																	// Configurar boton2 para flanco de bajada
 40e:	80 81       	ld	r24, Z
 410:	88 60       	ori	r24, 0x08	; 8
 412:	80 83       	st	Z, r24

	EIMSK |= (1 << INT0) | (1 << INT1);														// Habilitar boton1 y boton2
 414:	8d b3       	in	r24, 0x1d	; 29
 416:	83 60       	ori	r24, 0x03	; 3
 418:	8d bb       	out	0x1d, r24	; 29

	sei();																					// Habilitar interrupciones globales
 41a:	78 94       	sei
 41c:	08 95       	ret

Disassembly of section .text.setStepX:

000000c8 <setStepX>:
}															//>interupciones<

//????????????????????????????????????????????????????????????????????????????????????????//-----------------------------------------------------------------------------//

void setStepX(int step)
{															//>motor1<
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	c0 54       	subi	r28, 0x40	; 64
  d2:	d1 09       	sbc	r29, r1
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
																							// Tabla de pasos
	int sequence[8][4] =																	//[filas][columnas]
  de:	20 e4       	ldi	r18, 0x40	; 64
  e0:	e0 e0       	ldi	r30, 0x00	; 0
  e2:	f1 e0       	ldi	r31, 0x01	; 1
  e4:	de 01       	movw	r26, r28
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	01 90       	ld	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	2a 95       	dec	r18
  ee:	e1 f7       	brne	.-8      	; 0xe8 <setStepX+0x20>
		{1, 0, 0, 0},
		{1, 0, 0, 1}
	};														//>motor1<

																							// Configura los pines del puente HX según la tabla
	for (int i = 0; i < 4; i++)																// [columnas]
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	52 c0       	rjmp	.+164    	; 0x19a <setStepX+0xd2>
	{
		if (sequence[step][i])
  f6:	fc 01       	movw	r30, r24
  f8:	ee 0f       	add	r30, r30
  fa:	ff 1f       	adc	r31, r31
  fc:	ee 0f       	add	r30, r30
  fe:	ff 1f       	adc	r31, r31
 100:	e2 0f       	add	r30, r18
 102:	f3 1f       	adc	r31, r19
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	41 e0       	ldi	r20, 0x01	; 1
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	4c 0f       	add	r20, r28
 10e:	5d 1f       	adc	r21, r29
 110:	e4 0f       	add	r30, r20
 112:	f5 1f       	adc	r31, r21
 114:	40 81       	ld	r20, Z
 116:	51 81       	ldd	r21, Z+1	; 0x01
 118:	45 2b       	or	r20, r21
 11a:	f9 f0       	breq	.+62     	; 0x15a <setStepX+0x92>
		{													//>motor1<
																							// Configura el pin en alto
			switch (i)
 11c:	21 30       	cpi	r18, 0x01	; 1
 11e:	31 05       	cpc	r19, r1
 120:	81 f0       	breq	.+32     	; 0x142 <setStepX+0x7a>
 122:	24 f4       	brge	.+8      	; 0x12c <setStepX+0x64>
 124:	21 15       	cp	r18, r1
 126:	31 05       	cpc	r19, r1
 128:	41 f0       	breq	.+16     	; 0x13a <setStepX+0x72>
 12a:	35 c0       	rjmp	.+106    	; 0x196 <setStepX+0xce>
 12c:	22 30       	cpi	r18, 0x02	; 2
 12e:	31 05       	cpc	r19, r1
 130:	61 f0       	breq	.+24     	; 0x14a <setStepX+0x82>
 132:	23 30       	cpi	r18, 0x03	; 3
 134:	31 05       	cpc	r19, r1
 136:	69 f0       	breq	.+26     	; 0x152 <setStepX+0x8a>
 138:	2e c0       	rjmp	.+92     	; 0x196 <setStepX+0xce>
			{
				case 0:
				PORTB |= (1 << XIN1);
 13a:	45 b1       	in	r20, 0x05	; 5
 13c:	41 60       	ori	r20, 0x01	; 1
 13e:	45 b9       	out	0x05, r20	; 5
				break;
 140:	2a c0       	rjmp	.+84     	; 0x196 <setStepX+0xce>
				case 1:
				PORTB |= (1 << XIN2);
 142:	45 b1       	in	r20, 0x05	; 5
 144:	42 60       	ori	r20, 0x02	; 2
 146:	45 b9       	out	0x05, r20	; 5
				break;
 148:	26 c0       	rjmp	.+76     	; 0x196 <setStepX+0xce>
				case 2:
				PORTB |= (1 << XIN3);
 14a:	45 b1       	in	r20, 0x05	; 5
 14c:	44 60       	ori	r20, 0x04	; 4
 14e:	45 b9       	out	0x05, r20	; 5
				break;
 150:	22 c0       	rjmp	.+68     	; 0x196 <setStepX+0xce>
				case 3:
				PORTB |= (1 << XIN4);
 152:	45 b1       	in	r20, 0x05	; 5
 154:	48 60       	ori	r20, 0x08	; 8
 156:	45 b9       	out	0x05, r20	; 5
				break;
 158:	1e c0       	rjmp	.+60     	; 0x196 <setStepX+0xce>
			}
		}													//>motor1<
		else
		{													//>motor1<
																							// Configura el pin en bajo
			switch (i)
 15a:	21 30       	cpi	r18, 0x01	; 1
 15c:	31 05       	cpc	r19, r1
 15e:	81 f0       	breq	.+32     	; 0x180 <setStepX+0xb8>
 160:	24 f4       	brge	.+8      	; 0x16a <setStepX+0xa2>
 162:	21 15       	cp	r18, r1
 164:	31 05       	cpc	r19, r1
 166:	41 f0       	breq	.+16     	; 0x178 <setStepX+0xb0>
 168:	16 c0       	rjmp	.+44     	; 0x196 <setStepX+0xce>
 16a:	22 30       	cpi	r18, 0x02	; 2
 16c:	31 05       	cpc	r19, r1
 16e:	61 f0       	breq	.+24     	; 0x188 <setStepX+0xc0>
 170:	23 30       	cpi	r18, 0x03	; 3
 172:	31 05       	cpc	r19, r1
 174:	69 f0       	breq	.+26     	; 0x190 <setStepX+0xc8>
 176:	0f c0       	rjmp	.+30     	; 0x196 <setStepX+0xce>
			{
				case 0:
				PORTB &= ~(1 << XIN1);
 178:	45 b1       	in	r20, 0x05	; 5
 17a:	4e 7f       	andi	r20, 0xFE	; 254
 17c:	45 b9       	out	0x05, r20	; 5
				break;
 17e:	0b c0       	rjmp	.+22     	; 0x196 <setStepX+0xce>
				case 1:
				PORTB &= ~(1 << XIN2);
 180:	45 b1       	in	r20, 0x05	; 5
 182:	4d 7f       	andi	r20, 0xFD	; 253
 184:	45 b9       	out	0x05, r20	; 5
				break;
 186:	07 c0       	rjmp	.+14     	; 0x196 <setStepX+0xce>
				case 2:
				PORTB &= ~(1 << XIN3);
 188:	45 b1       	in	r20, 0x05	; 5
 18a:	4b 7f       	andi	r20, 0xFB	; 251
 18c:	45 b9       	out	0x05, r20	; 5
				break;
 18e:	03 c0       	rjmp	.+6      	; 0x196 <setStepX+0xce>
				case 3:
				PORTB &= ~(1 << XIN4);
 190:	45 b1       	in	r20, 0x05	; 5
 192:	47 7f       	andi	r20, 0xF7	; 247
 194:	45 b9       	out	0x05, r20	; 5
		{1, 0, 0, 0},
		{1, 0, 0, 1}
	};														//>motor1<

																							// Configura los pines del puente HX según la tabla
	for (int i = 0; i < 4; i++)																// [columnas]
 196:	2f 5f       	subi	r18, 0xFF	; 255
 198:	3f 4f       	sbci	r19, 0xFF	; 255
 19a:	24 30       	cpi	r18, 0x04	; 4
 19c:	31 05       	cpc	r19, r1
 19e:	0c f4       	brge	.+2      	; 0x1a2 <setStepX+0xda>
 1a0:	aa cf       	rjmp	.-172    	; 0xf6 <setStepX+0x2e>
				PORTB &= ~(1 << XIN4);
				break;
			}
		}
	}
}															//>motor1<
 1a2:	c0 5c       	subi	r28, 0xC0	; 192
 1a4:	df 4f       	sbci	r29, 0xFF	; 255
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

Disassembly of section .text.setStepY:

000001b6 <setStepY>:

//????????????????????????????????????????????????????????????????????????????????????????//-----------------------------------------------------------------------------//

void setStepY(int step)
{															//>motor2<
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	c0 54       	subi	r28, 0x40	; 64
 1c0:	d1 09       	sbc	r29, r1
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	cd bf       	out	0x3d, r28	; 61
																							// Tabla de pasos
	int sequence[8][4] =																	//[filas][columnas]
 1cc:	20 e4       	ldi	r18, 0x40	; 64
 1ce:	e0 e4       	ldi	r30, 0x40	; 64
 1d0:	f1 e0       	ldi	r31, 0x01	; 1
 1d2:	de 01       	movw	r26, r28
 1d4:	11 96       	adiw	r26, 0x01	; 1
 1d6:	01 90       	ld	r0, Z+
 1d8:	0d 92       	st	X+, r0
 1da:	2a 95       	dec	r18
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <setStepY+0x20>
		{0, 0, 0, 1},
		{1, 0, 0, 1}
	};														//>motor2<

																							// Configura los pines del puente HY según la tabla
	for (int i = 0; i < 4; i++)																//[columnas]
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	52 c0       	rjmp	.+164    	; 0x288 <setStepY+0xd2>
	{
		if (sequence[step][i])
 1e4:	fc 01       	movw	r30, r24
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	ee 0f       	add	r30, r30
 1ec:	ff 1f       	adc	r31, r31
 1ee:	e2 0f       	add	r30, r18
 1f0:	f3 1f       	adc	r31, r19
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	4c 0f       	add	r20, r28
 1fc:	5d 1f       	adc	r21, r29
 1fe:	e4 0f       	add	r30, r20
 200:	f5 1f       	adc	r31, r21
 202:	40 81       	ld	r20, Z
 204:	51 81       	ldd	r21, Z+1	; 0x01
 206:	45 2b       	or	r20, r21
 208:	f9 f0       	breq	.+62     	; 0x248 <setStepY+0x92>
		{													//>motor2<
																							// Configura el pin en alto
			switch (i)
 20a:	21 30       	cpi	r18, 0x01	; 1
 20c:	31 05       	cpc	r19, r1
 20e:	81 f0       	breq	.+32     	; 0x230 <setStepY+0x7a>
 210:	24 f4       	brge	.+8      	; 0x21a <setStepY+0x64>
 212:	21 15       	cp	r18, r1
 214:	31 05       	cpc	r19, r1
 216:	41 f0       	breq	.+16     	; 0x228 <setStepY+0x72>
 218:	35 c0       	rjmp	.+106    	; 0x284 <setStepY+0xce>
 21a:	22 30       	cpi	r18, 0x02	; 2
 21c:	31 05       	cpc	r19, r1
 21e:	61 f0       	breq	.+24     	; 0x238 <setStepY+0x82>
 220:	23 30       	cpi	r18, 0x03	; 3
 222:	31 05       	cpc	r19, r1
 224:	69 f0       	breq	.+26     	; 0x240 <setStepY+0x8a>
 226:	2e c0       	rjmp	.+92     	; 0x284 <setStepY+0xce>
			{
				case 0:
				PORTD |= (1 << YIN1);
 228:	4b b1       	in	r20, 0x0b	; 11
 22a:	40 61       	ori	r20, 0x10	; 16
 22c:	4b b9       	out	0x0b, r20	; 11
				break;
 22e:	2a c0       	rjmp	.+84     	; 0x284 <setStepY+0xce>
				case 1:
				PORTD |= (1 << YIN2);
 230:	4b b1       	in	r20, 0x0b	; 11
 232:	40 62       	ori	r20, 0x20	; 32
 234:	4b b9       	out	0x0b, r20	; 11
				break;
 236:	26 c0       	rjmp	.+76     	; 0x284 <setStepY+0xce>
				case 2:
				PORTD |= (1 << YIN3);
 238:	4b b1       	in	r20, 0x0b	; 11
 23a:	40 64       	ori	r20, 0x40	; 64
 23c:	4b b9       	out	0x0b, r20	; 11
				break;
 23e:	22 c0       	rjmp	.+68     	; 0x284 <setStepY+0xce>
				case 3:
				PORTD |= (1 << YIN4);
 240:	4b b1       	in	r20, 0x0b	; 11
 242:	40 68       	ori	r20, 0x80	; 128
 244:	4b b9       	out	0x0b, r20	; 11
				break;
 246:	1e c0       	rjmp	.+60     	; 0x284 <setStepY+0xce>
			}
		}													//>motor2<
		else
		{													//>motor2<
																							// Configura el pin en bajo
			switch (i)
 248:	21 30       	cpi	r18, 0x01	; 1
 24a:	31 05       	cpc	r19, r1
 24c:	81 f0       	breq	.+32     	; 0x26e <setStepY+0xb8>
 24e:	24 f4       	brge	.+8      	; 0x258 <setStepY+0xa2>
 250:	21 15       	cp	r18, r1
 252:	31 05       	cpc	r19, r1
 254:	41 f0       	breq	.+16     	; 0x266 <setStepY+0xb0>
 256:	16 c0       	rjmp	.+44     	; 0x284 <setStepY+0xce>
 258:	22 30       	cpi	r18, 0x02	; 2
 25a:	31 05       	cpc	r19, r1
 25c:	61 f0       	breq	.+24     	; 0x276 <setStepY+0xc0>
 25e:	23 30       	cpi	r18, 0x03	; 3
 260:	31 05       	cpc	r19, r1
 262:	69 f0       	breq	.+26     	; 0x27e <setStepY+0xc8>
 264:	0f c0       	rjmp	.+30     	; 0x284 <setStepY+0xce>
			{
				case 0:
				PORTD &= ~(1 << YIN1);
 266:	4b b1       	in	r20, 0x0b	; 11
 268:	4f 7e       	andi	r20, 0xEF	; 239
 26a:	4b b9       	out	0x0b, r20	; 11
				break;
 26c:	0b c0       	rjmp	.+22     	; 0x284 <setStepY+0xce>
				case 1:
				PORTD &= ~(1 << YIN2);
 26e:	4b b1       	in	r20, 0x0b	; 11
 270:	4f 7d       	andi	r20, 0xDF	; 223
 272:	4b b9       	out	0x0b, r20	; 11
				break;
 274:	07 c0       	rjmp	.+14     	; 0x284 <setStepY+0xce>
				case 2:
				PORTD &= ~(1 << YIN3);
 276:	4b b1       	in	r20, 0x0b	; 11
 278:	4f 7b       	andi	r20, 0xBF	; 191
 27a:	4b b9       	out	0x0b, r20	; 11
				break;
 27c:	03 c0       	rjmp	.+6      	; 0x284 <setStepY+0xce>
				case 3:
				PORTD &= ~(1 << YIN4);
 27e:	4b b1       	in	r20, 0x0b	; 11
 280:	4f 77       	andi	r20, 0x7F	; 127
 282:	4b b9       	out	0x0b, r20	; 11
		{0, 0, 0, 1},
		{1, 0, 0, 1}
	};														//>motor2<

																							// Configura los pines del puente HY según la tabla
	for (int i = 0; i < 4; i++)																//[columnas]
 284:	2f 5f       	subi	r18, 0xFF	; 255
 286:	3f 4f       	sbci	r19, 0xFF	; 255
 288:	24 30       	cpi	r18, 0x04	; 4
 28a:	31 05       	cpc	r19, r1
 28c:	0c f4       	brge	.+2      	; 0x290 <setStepY+0xda>
 28e:	aa cf       	rjmp	.-172    	; 0x1e4 <setStepY+0x2e>
				PORTD &= ~(1 << YIN4);
				break;
			}
		}
	}
}															//>motor2<
 290:	c0 5c       	subi	r28, 0xC0	; 192
 292:	df 4f       	sbci	r29, 0xFF	; 255
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	cd bf       	out	0x3d, r28	; 61
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

Disassembly of section .text.main:

000002a4 <main>:
//????????????????????????????????????????????????????????????????????????????????????????//-----------------------------------------------------------------------------//

int main(void)
{
															//>motor1<
	DDRB |= (1 << XIN1) | (1 << XIN2) | (1 << XIN3) | (1 << XIN4);							// Configura los pines de control del puente HX como salidas
 2a4:	84 b1       	in	r24, 0x04	; 4
 2a6:	8f 60       	ori	r24, 0x0F	; 15
 2a8:	84 b9       	out	0x04, r24	; 4
															//>motor1<
															
															//>motor2<
	DDRD |= (1 << YIN1) | (1 << YIN2) | (1 << YIN3) | (1 << YIN4);							// Configura los pines de control del puente HY como salidas
 2aa:	8a b1       	in	r24, 0x0a	; 10
 2ac:	80 6f       	ori	r24, 0xF0	; 240
 2ae:	8a b9       	out	0x0a, r24	; 10
															//>motor2<

															//>interupciones<
	DDRD &= ~((1 << BOTON1_PIN) | (1 << BOTON2_PIN));										// Configurar pines de entrada para los botones
 2b0:	8a b1       	in	r24, 0x0a	; 10
 2b2:	83 7f       	andi	r24, 0xF3	; 243
 2b4:	8a b9       	out	0x0a, r24	; 10

	ConfigInterrupciones();																	// Llamada a la funcion configinterupciones
 2b6:	0e 94 02 02 	call	0x404	; 0x404 <ConfigInterrupciones>
															//>interupciones<

															//>led<
	DDRB |= (1 << LED_PIN);																	// Configura pin led como salida
 2ba:	84 b1       	in	r24, 0x04	; 4
 2bc:	80 61       	ori	r24, 0x10	; 16
 2be:	84 b9       	out	0x04, r24	; 4
 2c0:	13 c0       	rjmp	.+38     	; 0x2e8 <main+0x44>
	while (1)
	{
		while (Auxb1==1)
			for (int i = 0; i < 8; i++)																// Girar en sentido horario
			{
				setStepX(i);
 2c2:	ce 01       	movw	r24, r28
 2c4:	0e 94 64 00 	call	0xc8	; 0xc8 <_etext>
				setStepY(i);
 2c8:	ce 01       	movw	r24, r28
 2ca:	0e 94 db 00 	call	0x1b6	; 0x1b6 <setStepY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	83 ed       	ldi	r24, 0xD3	; 211
 2d0:	90 e3       	ldi	r25, 0x30	; 48
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x2e>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0x34>
 2d8:	00 00       	nop


	while (1)
	{
		while (Auxb1==1)
			for (int i = 0; i < 8; i++)																// Girar en sentido horario
 2da:	21 96       	adiw	r28, 0x01	; 1
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <main+0x3e>
 2de:	c0 e0       	ldi	r28, 0x00	; 0
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
 2e2:	c8 30       	cpi	r28, 0x08	; 8
 2e4:	d1 05       	cpc	r29, r1
 2e6:	6c f3       	brlt	.-38     	; 0x2c2 <main+0x1e>
															//>led<


	while (1)
	{
		while (Auxb1==1)
 2e8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <Auxb1>
 2ec:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <Auxb1+0x1>
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	a9 f3       	breq	.-22     	; 0x2de <main+0x3a>
				setStepX(i);
				setStepY(i);
				_delay_ms(50);																		// Ajuste de tiempo entre pasos (filas) según la velocidad deseada
			}	
		
	    PORTB |= (1 << LED_PIN);
 2f4:	85 b1       	in	r24, 0x05	; 5
 2f6:	80 61       	ori	r24, 0x10	; 16
 2f8:	85 b9       	out	0x05, r24	; 5
 2fa:	9f e3       	ldi	r25, 0x3F	; 63
 2fc:	22 e4       	ldi	r18, 0x42	; 66
 2fe:	8f e0       	ldi	r24, 0x0F	; 15
 300:	91 50       	subi	r25, 0x01	; 1
 302:	20 40       	sbci	r18, 0x00	; 0
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0x5c>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x66>
 30a:	00 00       	nop
	    
	    _delay_ms(5000);
	    
	    PORTB &= ~(1 << LED_PIN);
 30c:	85 b1       	in	r24, 0x05	; 5
 30e:	8f 7e       	andi	r24, 0xEF	; 239
 310:	85 b9       	out	0x05, r24	; 5
 312:	9f e3       	ldi	r25, 0x3F	; 63
 314:	22 e4       	ldi	r18, 0x42	; 66
 316:	8f e0       	ldi	r24, 0x0F	; 15
 318:	91 50       	subi	r25, 0x01	; 1
 31a:	20 40       	sbci	r18, 0x00	; 0
 31c:	80 40       	sbci	r24, 0x00	; 0
 31e:	e1 f7       	brne	.-8      	; 0x318 <main+0x74>
 320:	00 c0       	rjmp	.+0      	; 0x322 <main+0x7e>
 322:	00 00       	nop
 324:	12 c0       	rjmp	.+36     	; 0x34a <main+0xa6>
	    _delay_ms(5000);
		
		while (Auxb2==1)
			for (int i = 8; i >= 0; i--)															// Girar en sentido antihorario
			{
				setStepX(i);
 326:	ce 01       	movw	r24, r28
 328:	0e 94 64 00 	call	0xc8	; 0xc8 <_etext>
				setStepY(i);
 32c:	ce 01       	movw	r24, r28
 32e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <setStepY>
 332:	83 ed       	ldi	r24, 0xD3	; 211
 334:	90 e3       	ldi	r25, 0x30	; 48
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <main+0x92>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0x98>
 33c:	00 00       	nop
	    PORTB &= ~(1 << LED_PIN);
	    
	    _delay_ms(5000);
		
		while (Auxb2==1)
			for (int i = 8; i >= 0; i--)															// Girar en sentido antihorario
 33e:	21 97       	sbiw	r28, 0x01	; 1
 340:	02 c0       	rjmp	.+4      	; 0x346 <main+0xa2>
 342:	c8 e0       	ldi	r28, 0x08	; 8
 344:	d0 e0       	ldi	r29, 0x00	; 0
 346:	dd 23       	and	r29, r29
 348:	74 f7       	brge	.-36     	; 0x326 <main+0x82>
	    
	    PORTB &= ~(1 << LED_PIN);
	    
	    _delay_ms(5000);
		
		while (Auxb2==1)
 34a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <Auxb2>
 34e:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <Auxb2+0x1>
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	b1 f3       	breq	.-20     	; 0x342 <main+0x9e>
 356:	c8 cf       	rjmp	.-112    	; 0x2e8 <main+0x44>

Disassembly of section .text.__vector_1:

00000358 <__vector_1>:
}
//????????????????????????????????????????????????????????????????????????????????????????//-----------------------------------------------------------------------------//

																							// Rutina de servicio de interrupción para boton1
ISR(INT0_vect)												//>interupciones<
{
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	8b e4       	ldi	r24, 0x4B	; 75
 368:	9d e1       	ldi	r25, 0x1D	; 29
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <__vector_1+0x12>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <__vector_1+0x18>
 370:	00 00       	nop
	_delay_ms(30);
	if (Auxb1 == 1)
 372:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <Auxb1>
 376:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <Auxb1+0x1>
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	29 f4       	brne	.+10     	; 0x388 <__vector_1+0x30>
	{
		Auxb1 = 0;
 37e:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <Auxb1+0x1>
 382:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <Auxb1>
 386:	06 c0       	rjmp	.+12     	; 0x394 <__vector_1+0x3c>
	}
	else
	{
		Auxb1 = 1;
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <Auxb1+0x1>
 390:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <Auxb1>
 394:	8b e4       	ldi	r24, 0x4B	; 75
 396:	9d e1       	ldi	r25, 0x1D	; 29
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <__vector_1+0x40>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <__vector_1+0x46>
 39e:	00 00       	nop
	}
	_delay_ms(30);
}															//>interupciones<
 3a0:	9f 91       	pop	r25
 3a2:	8f 91       	pop	r24
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

Disassembly of section .text.__vector_2:

000003ae <__vector_2>:

																							// Rutina de servicio de interrupción para boton2
ISR(INT1_vect)												//>interupciones<
{
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	8b e4       	ldi	r24, 0x4B	; 75
 3be:	9d e1       	ldi	r25, 0x1D	; 29
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <__vector_2+0x12>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <__vector_2+0x18>
 3c6:	00 00       	nop
	_delay_ms(30);
	if (Auxb2 == 1)
 3c8:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <Auxb2>
 3cc:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <Auxb2+0x1>
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	29 f4       	brne	.+10     	; 0x3de <__vector_2+0x30>
	{
		Auxb2 = 0;
 3d4:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <Auxb2+0x1>
 3d8:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <Auxb2>
 3dc:	06 c0       	rjmp	.+12     	; 0x3ea <__vector_2+0x3c>
	}
	else
	{
		Auxb2 = 1;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <Auxb2+0x1>
 3e6:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <Auxb2>
 3ea:	8b e4       	ldi	r24, 0x4B	; 75
 3ec:	9d e1       	ldi	r25, 0x1D	; 29
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <__vector_2+0x40>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <__vector_2+0x46>
 3f4:	00 00       	nop
	}
	_delay_ms(30);
}															//>interupciones<
 3f6:	9f 91       	pop	r25
 3f8:	8f 91       	pop	r24
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

Disassembly of section .text.__dummy_fini:

0000043c <_fini>:
 43c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000043e <__funcs_on_exit>:
 43e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000440 <__simulator_exit>:
 440:	08 95       	ret

Disassembly of section .text.exit:

0000041e <exit>:
 41e:	ec 01       	movw	r28, r24
 420:	0e 94 1f 02 	call	0x43e	; 0x43e <__funcs_on_exit>
 424:	0e 94 1e 02 	call	0x43c	; 0x43c <_fini>
 428:	ce 01       	movw	r24, r28
 42a:	0e 94 20 02 	call	0x440	; 0x440 <__simulator_exit>
 42e:	ce 01       	movw	r24, r28
 430:	0e 94 1c 02 	call	0x438	; 0x438 <_Exit>

Disassembly of section .text._Exit:

00000438 <_Exit>:
 438:	0e 94 62 00 	call	0xc4	; 0xc4 <_exit>
