
ADC TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000166  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000195  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b3  00000000  00000000  000001d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  00000a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000222  00000000  00000000  000010bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000028  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000e4  000000e4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001574  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.ADC_init 0000000e  000000d6  000000d6  0000014a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ADC_read 0000001c  000000a4  000000a4  00000118  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000024  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000000ee  000000ee  00000162  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000000f0  000000f0  00000164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  000000c0  000000c0  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000000e8  000000e8  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
   8:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
   c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  10:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  14:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  18:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  1c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  20:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  24:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  28:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  2c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  30:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  34:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  38:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  3c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  40:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  44:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  48:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  4c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  50:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  54:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  58:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  5c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  60:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  64:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000e4 <__bad_interrupt>:
  e4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.ADC_init:

000000d6 <ADC_init>:


void ADC_init()
{

	ADMUX = (1<<REFS0) | Pin;
  d6:	80 e4       	ldi	r24, 0x40	; 64
  d8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN)|(7<<ADPS0);
  dc:	87 e8       	ldi	r24, 0x87	; 135
  de:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e2:	08 95       	ret

Disassembly of section .text.ADC_read:

000000a4 <ADC_read>:
}

uint16_t ADC_read()
{

	ADCSRA |= (1<<ADSC);
  a4:	ea e7       	ldi	r30, 0x7A	; 122
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));
  ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	86 fd       	sbrc	r24, 6
  b4:	fc cf       	rjmp	.-8      	; 0xae <ADC_read+0xa>

	return (ADC);
  b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  ba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  be:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:

int main(void)
{
	uint16_t adc_result;

	ADC_init();
  80:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_init>

	DDRD |= (1<<PD1);
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	82 60       	ori	r24, 0x02	; 2
  88:	8a b9       	out	0x0a, r24	; 10

	while(1)
	{
		adc_result = ADC_read();
  8a:	0e 94 52 00 	call	0xa4	; 0xa4 <ADC_read>

		if(adc_result > Umbral)
  8e:	87 37       	cpi	r24, 0x77	; 119
  90:	92 40       	sbci	r25, 0x02	; 2
  92:	20 f0       	brcs	.+8      	; 0x9c <main+0x1c>
		PORTD |= (1<<PD1);
  94:	8b b1       	in	r24, 0x0b	; 11
  96:	82 60       	ori	r24, 0x02	; 2
  98:	8b b9       	out	0x0b, r24	; 11
  9a:	f7 cf       	rjmp	.-18     	; 0x8a <main+0xa>
		else
		PORTD &= ~(1<<PD1);
  9c:	8b b1       	in	r24, 0x0b	; 11
  9e:	8d 7f       	andi	r24, 0xFD	; 253
  a0:	8b b9       	out	0x0b, r24	; 11
  a2:	f3 cf       	rjmp	.-26     	; 0x8a <main+0xa>

Disassembly of section .text.__dummy_fini:

000000ec <_fini>:
  ec:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000ee <__funcs_on_exit>:
  ee:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000f0 <__simulator_exit>:
  f0:	08 95       	ret

Disassembly of section .text.exit:

000000c0 <exit>:
  c0:	ec 01       	movw	r28, r24
  c2:	0e 94 77 00 	call	0xee	; 0xee <__funcs_on_exit>
  c6:	0e 94 76 00 	call	0xec	; 0xec <_fini>
  ca:	ce 01       	movw	r24, r28
  cc:	0e 94 78 00 	call	0xf0	; 0xf0 <__simulator_exit>
  d0:	ce 01       	movw	r24, r28
  d2:	0e 94 74 00 	call	0xe8	; 0xe8 <_Exit>

Disassembly of section .text._Exit:

000000e8 <_Exit>:
  e8:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
